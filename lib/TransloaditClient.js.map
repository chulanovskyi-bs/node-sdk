{"version":3,"sources":["../src/TransloaditClient.js"],"names":["reqr","global","GENTLY","hijack","require","got","FormData","crypto","isObject","isArray","extend","sumBy","fromPairs","fs","basename","retry","PaginationStream","tus","promises","access","fsStat","stat","version","unknownErrMsg","str","buff","TransloaditClient","opts","useSsl","authKey","Error","authSecret","_authKey","_authSecret","_service","service","_protocol","_streams","_files","_lastUsedAssemblyUrl","name","stream","pause","path","progressCb","defaultOpts","params","fields","waitForCompletion","isResumable","_serviceUrl","Object","entries","F_OK","R_OK","streamsMap","map","label","createReadStream","streams","values","streamErrorPromise","resolve","reject","forEach","on","createAssemblyAndUpload","requestOpts","url","method","timeout","useTus","every","tus_num_expected_upload_files","length","console","warn","formUploadStreamsMap","tusStreamsMap","_remoteJson","result","error","keys","_sendTusRequest","assembly","awaitAssemblyCompletion","assembly_id","race","assemblyId","getAssemblyAsync","ok","assemblyProgress","setTimeout","assembly_url","notifyUrl","notify_url","page","cb","listAssemblyNotifications","listAssemblies","retryOpts","retries","factor","minTimeout","maxTimeout","operation","attempt","assembly_ssl_url","mainError","left","message","templateId","listTemplates","month","jsonParams","_prepareParams","signature","_calcSignature","toSign","createHmac","update","Buffer","from","digest","form","sigData","calcSignature","append","key","val","JSON","stringify","options","undefined","filename","indexOf","encodeURIComponent","auth","expires","_getExpiresDate","expiresDate","Date","setDate","getDate","toISOString","__remoteJson","info","retryIn","_timeouts","unshift","code","msg","push","join","_appendParamsToUrl","extraData","_appendForm","uploadingStreams","body","headers","responseType","HTTPError","response","statusCode","extendedMessage","onProgress","uploadProgresses","size","sizes","onTusProgress","bytesUploaded","uploadedBytes","streamLabels","lastEmittedProgress","uploadProgress","totalBytes","tusUpload","Upload","endpoint","tus_url","resume","metadata","fieldname","uploadSize","onError","onSuccess","start","uploadSingleStream","all","createAssemblyAsync","then","catch","assembyId","deleteAssemblyAsync","replayAssemblyAsync","replayAssemblyNotificationAsync","listAssemblyNotificationsAsync","listAssembliesAsync","createTemplateAsync","editTemplateAsync","deleteTemplateAsync","getTemplateAsync","listTemplatesAsync","getBillAsync","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,OAAOC,OAAOC,MAAP,GAAgBA,OAAOC,MAAP,CAAcC,OAAd,CAAhB,GAAyCA,OAAtD;AACA,IAAMC,MAAML,KAAK,KAAL,CAAZ;AACA,IAAMM,WAAWF,QAAQ,WAAR,CAAjB;AACA,IAAMG,SAASP,KAAK,QAAL,CAAf;;YACwDA,KAAK,QAAL,C;IAAhDQ,Q,SAAAA,Q;IAAUC,O,SAAAA,O;IAASC,M,SAAAA,M;IAAQC,K,SAAAA,K;IAAOC,S,SAAAA,S;;AAC1C,IAAMC,KAAKb,KAAK,IAAL,CAAX;;aACqBA,KAAK,MAAL,C;IAAbc,Q,UAAAA,Q;;AACR,IAAMC,QAAQf,KAAK,OAAL,CAAd;AACA,IAAMgB,mBAAmBhB,KAAK,oBAAL,CAAzB;AACA,IAAMiB,MAAMjB,KAAK,eAAL,CAAZ;qBACiCA,KAAK,IAAL,EAAWkB,Q;IAApCC,M,kBAAAA,M;IAAcC,M,kBAANC,I;;;AAEhB,IAAMC,UAAUtB,KAAK,iBAAL,EAAwBsB,OAAxC;;AAEA,SAASC,aAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAIC,OAAO,eAAX;AACA,MAAID,GAAJ,EAAS;AACPC,kBAAYD,GAAZ;AACD;AACDC,UAAQ,0BAAR;AACAA,UAAQ,0EAAR;AACA,SAAOA,IAAP;AACD;;IAEKC,iB;AACJ,+BAAwB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACtB,QAAIA,KAAKC,MAAL,IAAe,IAAnB,EAAyB;AACvBD,WAAKC,MAAL,GAAc,IAAd;AACD;;AAED,QAAID,KAAKE,OAAL,IAAgB,IAApB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,QAAIH,KAAKI,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,YAAM,IAAID,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,SAAKE,QAAL,GAAgBL,KAAKE,OAArB;AACA,SAAKI,WAAL,GAAmBN,KAAKI,UAAxB;AACA,SAAKG,QAAL,GAAgBP,KAAKQ,OAAL,IAAgB,sBAAhC;AACA,SAAKC,SAAL,GAAiBT,KAAKC,MAAL,GAAc,UAAd,GAA2B,SAA5C;AACA,SAAKS,QAAL,GAAgB,EAAhB;AACA,SAAKC,MAAL,GAAc,EAAd;;AAEA,SAAKC,oBAAL,GAA4B,EAA5B;AACD;;AAED;;;;;;;;;;8BAMWC,I,EAAMC,M,EAAQ;AACvBA,aAAOC,KAAP;AACA,WAAKL,QAAL,CAAcG,IAAd,IAAsBC,MAAtB;AACD;;AAED;;;;;;;;;4BAMSD,I,EAAMG,I,EAAM;AACnB,WAAKL,MAAL,CAAYE,IAAZ,IAAoBG,IAApB;AACD;;;6CAEyB;AACxB,aAAO,KAAKJ,oBAAZ;AACD;;AAED;;;;;;;;;;;;;;;;;;2FAc2BZ,I,EAAMiB,U;;;;;;;;;AACzBC,2B,GAAc;AAClBC,0BAAmB,EADD;AAElBC,0BAAmB,EAFD;AAGlBC,qCAAmB,KAHD;AAIlBC,+BAAmB;AAJD,iB;;AAMpBtB,oCAAYkB,WAAZ,EAA4BlB,IAA5B;;AAEA,qBAAKY,oBAAL,GAA+B,KAAKW,WAAL,EAA/B;;;;;;4BAEuBC,OAAOC,OAAP,CAAe,KAAKd,MAApB,C;;;;;;;;8DAATK,I;;uBACNxB,OAAOwB,IAAP,EAAa9B,GAAGwC,IAAH,GAAUxC,GAAGyC,IAA1B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGR;AACMC,0B,GAAa3C,UAAUuC,OAAOC,OAAP,CAAe,KAAKf,QAApB,EAA8BmB,GAA9B,CAAkC;AAAA;AAAA,sBAAEC,KAAF;AAAA,sBAAShB,MAAT;;AAAA,yBAAqB,CAACgB,KAAD,EAAQ,EAAEhB,cAAF,EAAR,CAArB;AAAA,iBAAlC,CAAV,C;;AAEnB;;;;;;AACA,kCAA4BU,OAAOC,OAAP,CAAe,KAAKd,MAApB,CAA5B,2HAAyD;AAAA,kEAA7CmB,KAA6C,oBAAtCd,IAAsC;AACjDF,wBADiD,GACxC5B,GAAG6C,gBAAH,CAAoBf,IAApB,CADwC;;AAEvDF,yBAAOC,KAAP;AACAa,6BAAWE,KAAX,IAAoB,EAAEhB,cAAF,EAAUE,UAAV,EAApB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qBAAKN,QAAL,GAAgB,EAAhB;AACA,qBAAKC,MAAL,GAAc,EAAd;;AAEMqB,uB,GAAUR,OAAOS,MAAP,CAAcL,UAAd,C;;AAEhB;;AACMM,kC,GAAqB,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1DJ,0BAAQK,OAAR,CAAgB;AAAA,wBAAGvB,MAAH,SAAGA,MAAH;AAAA,2BAAgBA,OAAOwB,EAAP,CAAU,OAAV,EAAmBF,MAAnB,CAAhB;AAAA,mBAAhB;AACD,iBAF0B,C;;AAIrBG,uC;sFAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,uCADwB,GACV;AAClBC,mCAAS,MAAK7B,oBADI;AAElB8B,sCAAS,MAFS;AAGlBC,uCAAS,KAAK,EAAL,GAAU,EAAV,GAAe,IAHN,EAGY;AAC9BxB,sCAASnB,KAAKmB,MAJI;AAKlBC,sCAASpB,KAAKoB;;AAGhB;AARoB,6BADU;AAUxBwB,kCAVwB,GAUf5C,KAAKsB,WAAL,IAAoBU,QAAQa,KAAR,CAAc;AAAA,kCAAG7B,IAAH,SAAGA,IAAH;AAAA,qCAAcA,IAAd;AAAA,6BAAd,CAVL;;;AAY9B,gCAAI4B,MAAJ,EAAY;AACVJ,0CAAYM,6BAAZ,GAA4Cd,QAAQe,MAApD;AACD,6BAFD,MAEO,IAAI/C,KAAKsB,WAAT,EAAsB;AAC3B0B,sCAAQC,IAAR,CAAa,qFAAb;AACD;;AAED;AACMC,gDAnBwB,GAmBDN,SAAS,EAAT,GAAchB,UAnBb;AAoBxBuB,yCApBwB,GAoBRP,SAAShB,UAAT,GAAsB,EApBd;AAAA;AAAA,mCAsBT,MAAKwB,WAAL,CAAiBZ,WAAjB,EAA8BU,oBAA9B,CAtBS;;AAAA;AAsBxBG,kCAtBwB;;AAAA,kCAyB1BA,OAAOC,KAAP,IAAgB,IAzBU;AAAA;AAAA;AAAA;;AAAA,kCAyBE,IAAInD,KAAJ,CAAUkD,OAAOC,KAAjB,CAzBF;;AAAA;AAAA,kCA2B1BV,UAAUpB,OAAO+B,IAAP,CAAYJ,aAAZ,EAA2BJ,MAA3B,GAAoC,CA3BpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mCA4BtB,MAAKS,eAAL,CAAqBL,aAArB,EAAoC,EAAE9B,mBAAmBrB,KAAKqB,iBAA1B,EAA6CoC,UAAUJ,MAAvD,EAApC,EAAqGpC,UAArG,CA5BsB;;AAAA;AAAA,gCA+BzBjB,KAAKqB,iBA/BoB;AAAA;AAAA;AAAA;;AAAA,6DA+BMgC,MA/BN;;AAAA;AAAA,6DAgCvB,MAAKK,uBAAL,CAA6BL,OAAOM,WAApC,EAAiD1C,UAAjD,CAhCuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAA1BsB,uB;;;;;kDAmCC,SAAQqB,IAAR,CAAa,CAACrB,yBAAD,EAA4BL,kBAA5B,CAAb,C;;;;;;;;;;;;;;;;;;;4FAGsB2B,U,EAAY5C,U;;;;;;;uBACpB,KAAK6C,gBAAL,CAAsBD,UAAtB,C;;;AAAfR,sB;;sBACFA,OAAOC,KAAP,IAAgB,I;;;;;sBAAY,IAAInD,KAAJ,CAAUkD,OAAOC,KAAjB,C;;;sBAE5BD,OAAOU,EAAP,KAAc,oB;;;;;kDAA6BV,M;;;sBAE3CA,OAAOU,EAAP,KAAc,oBAAd,IAAsCV,OAAOU,EAAP,KAAc,oB;;;;;AACtD,oBAAI9C,UAAJ,EAAgBA,WAAW,EAAE+C,kBAAkBX,MAApB,EAAX;;;uBAEV,aAAY,UAAClB,OAAD;AAAA,yBAAa8B,WAAW9B,OAAX,EAAoB,IAAI,IAAxB,CAAb;AAAA,iBAAZ,C;;;kDAEC,KAAKuB,uBAAL,CAA6BG,UAA7B,EAAyC5C,UAAzC,C;;;sBAGH,IAAId,KAAJ,CAAUP,gDAA8CiE,UAA9C,CAAV,C;;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;4FAM2BA,U;;;;;;;;uBAEM,KAAKC,gBAAL,CAAsBD,UAAtB,C;;;;;;;;;;+BAAqC,E;;;;AAA5DK,4B,SAAAA,Y;AAEFlE,oB,GAAO;AACXyC,uBAASyB,YADE;AAEXvB,2BAAS,IAFE;AAGXD,0BAAS;AAHE,iB;kDAMN,KAAKU,WAAL,CAAiBpD,IAAjB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;;6FAU2BA,I;;;;;;AACJ6D,0B,GAAsC7D,I,CAAnD2D,W,EAAqCQ,S,GAAcnE,I,CAA1BoE,U;AAC3B5B,2B,GAAc;AAClBC,uBAAQ,KAAKlB,WAAL,uBAAoCsC,UAApC,aADU;AAElBnB,0BAAQ;AAFU,iB;;;AAKpB,oBAAIyB,aAAa,IAAjB,EAAuB;AACrB3B,8BAAYrB,MAAZ,GAAqB,EAAEgD,oBAAF,EAArB;AACD;;kDAEM,KAAKf,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;YAMsDqB,U,UAAbF,W;YAAqCQ,S,UAAZC,U;;;;;;AAC1D5B,2B,GAAc;AAClBC,uBAAQ,KAAKlB,WAAL,mCAAgDsC,UAAhD,aADU;AAElBnB,0BAAQ;AAFU,iB;;;AAKpB,oBAAIyB,aAAa,IAAjB,EAAuB;AACrB3B,8BAAYrB,MAAZ,GAAqB,EAAEgD,oBAAF,EAArB;AACD;;kDAEM,KAAKf,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;6FAMsCrB,M;;;;;;AAC9BqB,2B,GAAc;AAClBC,uBAAW,KAAKlB,WAAL,EAAX,4BADkB;AAElBmB,0BAAQ,KAFU;AAGlBvB,0BAAQA,UAAU;AAHA,iB;kDAMb,KAAKiC,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;;gDAGoBrB,M,EAAQ;AAAA;;AACnC,aAAO,IAAI9B,gBAAJ,CAAqB,UAACgF,IAAD,EAAOC,EAAP,EAAc;AACxC,eAAKC,yBAAL,cAAoCpD,MAApC,IAA4CkD,UAA5C,KAAoDC,EAApD;AACD,OAFM,CAAP;AAGD;;AAED;;;;;;;;;;6FAM2BnD,M;;;;;;AACnBqB,2B,GAAc;AAClBC,uBAAW,KAAKlB,WAAL,EAAX,gBADkB;AAElBmB,0BAAQ,KAFU;AAGlBvB,0BAAQA,UAAU;AAHA,iB;kDAMb,KAAKiC,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;;qCAGSrB,M,EAAQ;AAAA;;AACxB,aAAO,IAAI9B,gBAAJ,CAAqB,UAACgF,IAAD,EAAOC,EAAP,EAAc;AACxC,eAAKE,cAAL,cAAyBrD,MAAzB,IAAiCkD,UAAjC,KAAyCC,EAAzC;AACD,OAFM,CAAP;AAGD;;AAED;;;;;;;;;;8FAMwBT,U;;;;;;;;AAChB7D,oB,GAAO,EAAEyC,KAAK,KAAKlB,WAAL,uBAAoCsC,UAApC,CAAP,E;AAEPY,yB,GAAY;AAChBC,2BAAY,CADI;AAEhBC,0BAAY,IAFI;AAGhBC,8BAAY,IAAI,IAHA;AAIhBC,8BAAY,IAAI;AAJA,iB;mDAOX,aAAY,UAAC1C,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAM0C,YAAY1F,MAAM0F,SAAN,CAAgBL,SAAhB,CAAlB;AACAK,4BAAUC,OAAV;AAAA,yFAAkB,kBAAOA,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAEO,OAAK3B,WAAL,CAAiBpD,IAAjB,CAFP;;AAAA;AAERqD,oCAFQ;;AAAA,oCAIVA,OAAOa,YAAP,IAAuB,IAAvB,IAA+Bb,OAAO2B,gBAAP,IAA2B,IAJhD;AAAA;AAAA;AAAA;;AAAA,mCAKRF,UAAU1F,KAAV,CAAgB,IAAIe,KAAJ,CAAU,yCAAV,CAAhB,CALQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gEASLiC,OAAO0C,UAAUG,SAAV,EAAP,CATK;;AAAA;AAAA,gEAYP9C,QAAQkB,MAAR,CAZO;;AAAA;AAAA;AAAA;;AAAA,mCAcVyB,UAAU1F,KAAV,cAdU;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gEAkBPgD,OAAO0C,UAAUG,SAAV,EAAP,CAlBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAlB;;AAAA;AAAA;AAAA;AAAA;AAqBD,iBAvBM,C;;;;;;;;;;;;;;;;;AA0BT;;;;;;;;;;8FAM2B9D,M;;;;;;AACnBqB,2B,GAAc;AAClBC,uBAAW,KAAKlB,WAAL,EAAX,eADkB;AAElBmB,0BAAQ,MAFU;AAGlBvB,0BAAQA,UAAU;AAHA,iB;;uBAMC,KAAKiC,WAAL,CAAiBZ,WAAjB,C;;;AAAfa,sB;;sBACFA,UAAUA,OAAOU,E;;;;;mDACZV,M;;;AAGL6B,oB;sBACE,IAAI/E,KAAJ,CAAU,CAAC+E,OAAO7B,OAAOC,KAAP,IAAgB,IAAhB,GAAuBD,OAAOC,KAA9B,GAAsCD,OAAO8B,OAArD,KAAiE,IAAjE,GAAwED,IAAxE,GAA+EtF,cAAc,yBAAd,CAAzF,C;;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;8FAOyBwF,U,EAAYjE,M;;;;;;AAC7BqB,2B,GAAc;AAClBC,uBAAW,KAAKlB,WAAL,EAAX,mBAA2C6D,UADzB;AAElB1C,0BAAQ,KAFU;AAGlBvB,0BAAQA,UAAU;AAHA,iB;;uBAMC,KAAKiC,WAAL,CAAiBZ,WAAjB,C;;;AAAfa,sB;;sBACFA,UAAUA,OAAOU,E;;;;;mDACZV,M;;;AAGL6B,oB;sBACE,IAAI/E,KAAJ,CAAU,CAAC+E,OAAO7B,OAAOC,KAAP,IAAgB,IAAhB,GAAuBD,OAAOC,KAA9B,GAAsCD,OAAO8B,OAArD,KAAiE,IAAjE,GAAwED,IAAxE,GAA+EtF,aAAzF,C;;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;8FAM2BwF,U;;;;;;AACnB5C,2B,GAAc;AAClBC,uBAAQ,KAAKlB,WAAL,sBAAmC6D,UAAnC,CADU;AAElB1C,0BAAQ;AAFU,iB;mDAKb,KAAKU,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;8FAMwB4C,U;;;;;;AAChB5C,2B,GAAc;AAClBC,uBAAW,KAAKlB,WAAL,EAAX,mBAA2C6D,UADzB;AAElB1C,0BAAQ;AAFU,iB;mDAKb,KAAKU,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;8FAM0BrB,M;;;;;;AAClBqB,2B,GAAc;AAClBC,uBAAW,KAAKlB,WAAL,EAAX,eADkB;AAElBmB,0BAAQ,KAFU;AAGlBvB,0BAAQA,UAAU;AAHA,iB;mDAMb,KAAKiC,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;;oCAGQrB,M,EAAQ;AAAA;;AACvB,aAAO,IAAI9B,gBAAJ,CAAqB,UAACgF,IAAD,EAAOC,EAAP,EAAc;AACxC,eAAKe,aAAL,cAAwBlE,MAAxB,IAAgCkD,UAAhC,KAAwCC,EAAxC;AACD,OAFM,CAAP;AAGD;;AAED;;;;;;;;;;8FAMoBgB,K;;;;;;AACZ9C,2B,GAAc;AAClBC,uBAAQ,KAAKlB,WAAL,iBAA8B+D,KAA9B,CADU;AAElB5C,0BAAQ;AAFU,iB;mDAKb,KAAKU,WAAL,CAAiBZ,WAAjB,C;;;;;;;;;;;;;;;;;;kCAGMrB,M,EAAQ;AACrB,UAAMoE,aAAa,KAAKC,cAAL,CAAoBrE,MAApB,CAAnB;AACA,UAAMsE,YAAY,KAAKC,cAAL,CAAoBH,UAApB,CAAlB;;AAEA,aAAO,EAAEE,oBAAF,EAAatE,QAAQoE,UAArB,EAAP;AACD;;;mCAEeI,M,EAAQ;AACtB,aAAO/G,OACJgH,UADI,CACO,MADP,EACe,KAAKtF,WADpB,EAEJuF,MAFI,CAEGC,OAAOC,IAAP,CAAYJ,MAAZ,EAAoB,OAApB,CAFH,EAGJK,MAHI,CAGG,KAHH,CAAP;AAID;;AAED;AACA;;;;gCACaC,I,EAAM9E,M,EAAQS,U,EAAYR,M,EAAQ;AAC7C,UAAM8E,UAAU,KAAKC,aAAL,CAAmBhF,MAAnB,CAAhB;AACA,UAAMoE,aAAaW,QAAQ/E,MAA3B;AAF6C,UAGrCsE,SAHqC,GAGvBS,OAHuB,CAGrCT,SAHqC;;;AAK7CQ,WAAKG,MAAL,CAAY,QAAZ,EAAsBb,UAAtB;;AAEA,UAAInE,UAAU,IAAd,EAAoB;AAAA;AAAA;AAAA;;AAAA;AAClB,gCAAuBI,OAAOC,OAAP,CAAeL,MAAf,CAAvB,mIAA+C;AAAA;AAAA,gBAArCiF,GAAqC;AAAA,gBAAhCC,GAAgC;;AAC7C;AACA,gBAAIzH,SAASyH,GAAT,KAAiBxH,QAAQwH,GAAR,CAArB,EAAmC;AACjCA,oBAAMC,KAAKC,SAAL,CAAeF,GAAf,CAAN;AACD;AACDL,iBAAKG,MAAL,CAAYC,GAAZ,EAAiBC,GAAjB;AACD;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnB;;AAEDL,WAAKG,MAAL,CAAY,WAAZ,EAAyBX,SAAzB;;AAEA,UAAI7D,UAAJ,EAAgB;AACdJ,eAAOC,OAAP,CAAeG,UAAf,EAA2BS,OAA3B,CAAmC,kBAA+B;AAAA;AAAA,cAA7BP,KAA6B;AAAA;AAAA,cAApBhB,MAAoB,WAApBA,MAAoB;AAAA,cAAZE,IAAY,WAAZA,IAAY;;AAChE,cAAMyF,UAAUzF,OAAO0F,SAAP,GAAmB,EAAEC,UAAU7E,KAAZ,CAAoB;AAApB,WAAnC,CACAmE,KAAKG,MAAL,CAAYtE,KAAZ,EAAmBhB,MAAnB,EAA2B2F,OAA3B;AACD,SAHD;AAID;AACF;;AAED;AACA;;;;uCACoBhE,G,EAAKtB,M,EAAQ;AAC/B,UAAM+E,UAAU,KAAKC,aAAL,CAAmBhF,MAAnB,CAAhB;AAD+B,UAEvBsE,SAFuB,GAETS,OAFS,CAEvBT,SAFuB;;AAG/B,UAAIF,aAAaW,QAAQ/E,MAAzB;;AAEA;AACA,UAAIsB,IAAImE,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AAC3BnE,+BAAqBgD,SAArB;AACD,OAFD,MAEO;AACLhD,+BAAqBgD,SAArB;AACD;;AAEDF,mBAAasB,mBAAmBtB,UAAnB,CAAb;AACA9C,0BAAkB8C,UAAlB;;AAEA,aAAO9C,GAAP;AACD;;AAED;;;;mCACgBtB,M,EAAQ;AACtB,UAAIA,UAAU,IAAd,EAAoB;AAClBA,iBAAS,EAAT;AACD;AACD,UAAIA,OAAO2F,IAAP,IAAe,IAAnB,EAAyB;AACvB3F,eAAO2F,IAAP,GAAc,EAAd;AACD;AACD,UAAI3F,OAAO2F,IAAP,CAAYT,GAAZ,IAAmB,IAAvB,EAA6B;AAC3BlF,eAAO2F,IAAP,CAAYT,GAAZ,GAAkB,KAAKhG,QAAvB;AACD;AACD,UAAIc,OAAO2F,IAAP,CAAYC,OAAZ,IAAuB,IAA3B,EAAiC;AAC/B5F,eAAO2F,IAAP,CAAYC,OAAZ,GAAsB,KAAKC,eAAL,EAAtB;AACD;;AAED,aAAOT,KAAKC,SAAL,CAAerF,MAAf,CAAP;AACD;;;sCAEkB;AACjB,UAAM8F,cAAc,IAAIC,IAAJ,EAApB;AACAD,kBAAYE,OAAZ,CAAoBF,YAAYG,OAAZ,KAAwB,CAA5C;AACA,aAAOH,YAAYI,WAAZ,EAAP;AACD;;;kCAEc;AACb,aAAO,KAAK5G,SAAL,GAAiB,KAAKF,QAA7B;AACD;;AAED;;;;;8FACmBP,I,EAAM4B,U;;;;;;;;AACjBkD,yB,GAAY1F,MAAM0F,SAAN,CAAgB;AAChCJ,2BAAY,CADoB;AAEhCC,0BAAY,IAFoB;AAGhCC,8BAAY,IAAI,IAHgB;AAIhCC,8BAAY,IAAI;AAJgB,iBAAhB,C;mDAOX,aAAY,UAAC1C,OAAD,EAAUC,MAAV,EAAqB;AACtC0C,4BAAUC,OAAV,yDAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAEd5C,OAFc;AAAA;AAAA,mCAEA,OAAKmF,YAAL,CAAkBtH,IAAlB,EAAwB4B,UAAxB,CAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kCAIV,cAAI0B,KAAJ,KAAc,oBAJJ;AAAA;AAAA;AAAA;;AAKZN,oCAAQC,IAAR,8CAAwD,cAAIsE,IAAJ,CAASC,OAAjE;AACA;AACA1C,sCAAU2C,SAAV,CAAoBC,OAApB,CAA4B,OAAO,cAAIH,IAAJ,CAASC,OAA5C;AAPY,+DAQL1C,UAAU1F,KAAV,eARK;;AAAA;AAAA,kCAWV,cAAIuI,IAAJ,KAAa,WAXH;AAAA;AAAA;AAAA;;AAYZ3E,oCAAQC,IAAR,CAAa,gEAAb;AACA;AACA6B,sCAAU2C,SAAV,CAAoBC,OAApB,CAA4B,IAAI,IAAhC;AAdY,+DAeL5C,UAAU1F,KAAV,eAfK;;AAAA;AAAA,kCAkBV,cAAIkE,KAAJ,KAAc,8BAlBJ;AAAA;AAAA;AAAA;;AAmBZN,oCAAQC,IAAR,CAAa,4BAAb;AAnBY,+DAoBLb,qBApBK;;AAAA;AAAA,kCAuBV,cAAIkB,KAAJ,KAAcoD,SAvBJ;AAAA;AAAA;AAAA;;AAwBNkB,+BAxBM,GAwBA,EAxBA;;AAyBZ,gCAAI,cAAItE,KAAR,EAAe;AAAEsE,kCAAIC,IAAJ,CAAS,cAAIvE,KAAb;AAAqB;AACtC,gCAAItD,KAAKyC,GAAT,EAAc;AAAEmF,kCAAIC,IAAJ,CAAS7H,KAAKyC,GAAd;AAAoB;AACpC,gCAAI,cAAI0C,OAAR,EAAiB;AAAEyC,kCAAIC,IAAJ,CAAS,cAAI1C,OAAb;AAAuB;;AAE1CnC,oCAAQC,IAAR,CAAa2E,IAAIE,IAAJ,CAAS,KAAT,CAAb;AA7BY,+DA8BL1F,qBA9BK;;AAAA;AAAA,iCAiCV0C,UAAU1F,KAAV,eAjCU;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAqCdgD,mCAAO0C,UAAUG,SAAV,EAAP;;AArCc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAlB;AAwCD,iBAzCM,C;;;;;;;;;;;;;;;;;AA4CT;AACA;AACA;;;;;8FACoBjF,I,EAAM4B,U;;;;;;;AAClBe,uB,GAAU3C,KAAK2C,OAAL,IAAgB,I;AAC5BF,mB,GAAMzC,KAAKyC,GAAL,IAAY,I;AAChBC,sB,GAAS1C,KAAK0C,MAAL,IAAe,K;AACxBvB,sB,GAASnB,KAAKmB,MAAL,IAAe,E;;oBAEzBsB,G;;;;;sBACG,IAAItC,KAAJ,CAAU,kBAAV,C;;;;AAGR,oBAAIuC,WAAW,KAAf,EAAsB;AACpBD,wBAAM,KAAKsF,kBAAL,CAAwBtF,GAAxB,EAA6BtB,MAA7B,CAAN;AACD;;AAEG8E,oB;;;AAEJ,oBAAIvD,WAAW,MAAX,IAAqBA,WAAW,KAAhC,IAAyCA,WAAW,QAAxD,EAAkE;AAC1DsF,2BAD0D,gBACzChI,KAAKoB,MADoC;;AAEhE,sBAAIpB,KAAK8C,6BAAT,EAAwC;AACtCkF,8BAAUlF,6BAAV,GAA0C9C,KAAK8C,6BAA/C;AACD;AACDmD,yBAAO,IAAItH,QAAJ,EAAP;AACA,uBAAKsJ,WAAL,CAAiBhC,IAAjB,EAAuB9E,MAAvB,EAA+BS,UAA/B,EAA2CoG,SAA3C;AACD;;AAEKE,gC,GAAmBtG,cAAcJ,OAAO+B,IAAP,CAAY3B,UAAZ,EAAwBmB,MAAxB,GAAiC,C;AAElEP,2B,GAAc;AAClB2F,wBAASlC,IADS;AAElBtD,kCAFkB;AAGlByF;AACE,wDAAkCzI;AADpC,qBAEKK,KAAKoI,OAFV,CAHkB;AAOlBC,gCAAc;;AAGhB;AAVoB,iB;AAWpB,oBAAIH,gBAAJ,EAAsB1F,YAAY4F,OAAZ,CAAoB,mBAApB,IAA2C,SAA3C;;;;uBAGG1J,IAAIgE,MAAJ,EAAYD,GAAZ,EAAiBD,WAAjB,C;;;;AAAf2F,oB,UAAAA,I;mDACDA,I;;;;;;sBAEH,yBAAezJ,IAAI4J,S;;;;;gCACQ,cAAIC,Q,EAAzBC,U,iBAAAA,U,EAAYL,K,iBAAAA,I;AACpB;;sBAEIK,eAAe,GAAf,IAAsBA,aAAa,G;;;;;mDAC9BL,K;;;AAGHM,+B,GAAkB,E;;AACxB,oBAAIN,MAAKhD,OAAL,IAAgBgD,MAAK7E,KAAzB,EAAgC;AAC9BmF,kCAAgBtD,OAAhB,GAA6BgD,MAAK7E,KAAlC,UAA4C6E,MAAKhD,OAAjD;AACD;sBACKpG,OAAO,IAAIoB,KAAJ,EAAP,EAAoBgI,KAApB,EAA0BM,eAA1B,C;;;;;;;;;;;;;;;;;;;;;;8FAOW7G,U,EAAY5B,I,EAAM0I,U;;+EAsBvC,mBAAmC5G,KAAnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE6G,qCAAiB7G,KAAjB,IAA0B,CAA1B;;AADF,wCAG2BF,WAAWE,KAAX,CAH3B,EAGUhB,MAHV,qBAGUA,MAHV,EAGkBE,IAHlB,qBAGkBA,IAHlB;AAIQ4H,wBAJR,GAIeC,MAAM/G,KAAN,CAJf;;AAMQgH,iCANR,GAMwB,SAAhBA,aAAgB,CAACC,aAAD,EAAmB;AACvCJ,uCAAiB7G,KAAjB,IAA0BiH,aAA1B;;AAEA;AACA,0BAAMC,gBAAgBhK,MAAMiK,YAAN,EAAoB,UAACnH,KAAD;AAAA,+BAAW6G,iBAAiB7G,KAAjB,CAAX;AAAA,uBAApB,CAAtB;;AAEA;AACA,0BAAIoH,sBAAsBF,aAA1B,EAAyC;AACvCE,8CAAsBF,aAAtB;AACAN,mCAAW,EAAES,gBAAgB,EAAEH,4BAAF,EAAiBI,sBAAjB,EAAlB,EAAX;AACD;AACF,qBAjBH;;AAmBQzC,4BAnBR,GAmBmB3F,OAAO7B,SAAS6B,IAAT,CAAP,GAAwBc,KAnB3C;AAAA;AAAA,2BAqBQ,aAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB;AACrC,0BAAMiH,YAAY,IAAI/J,IAAIgK,MAAR,CAAexI,MAAf,EAAuB;AACvCyI,kCAAUvJ,KAAKyD,QAAL,CAAc+F,OADe;AAEvCC,gCAAU,IAF6B;AAGvCC,kCAAU;AACRxF,wCAAclE,KAAKyD,QAAL,CAAcuB,gBADpB;AAER2E,qCAAc7H,KAFN;AAGR6E;AAHQ,yBAH6B;AAQvCiD,oCAAYhB,IAR2B;AASvCiB,iCAAYzH,MAT2B;AAUvCsG,oCAAYI,aAV2B;AAWvCgB,mCAAY3H;AAX2B,uBAAvB,CAAlB;;AAcAkH,gCAAUU,KAAV;AACD,qBAhBK,CArBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,W;;0BAAeC,kB;;;;;AA0Cf;;;;;;;;;AA/DMf,4B,GAAezH,OAAO+B,IAAP,CAAY3B,UAAZ,C;AAEjBwH,0B,GAAa,C;AACbF,mC,GAAsB,C;;AAC1BR,6BAAaA,cAAe,YAAM,CAAE,CAApC;;AAEMG,qB,GAAQ,E;;AAEd;;;;;;6BACoBI,Y;;;;;;;;AAATnH,qB;AACDd,oB,GAASY,WAAWE,KAAX,C,CAATd,I;;qBAEJA,I;;;;;;uBACqBvB,OAAOuB,IAAP,C;;;;AAAf4H,oB,UAAAA,I;;AACRC,sBAAM/G,KAAN,IAAe8G,IAAf;AACAQ,8BAAcR,IAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIED,gC,GAAmB,E;AA6CnBpJ,wB,GAAW0J,aAAapH,GAAb,CAAiB,UAACC,KAAD;AAAA,yBAAWkI,mBAAmBlI,KAAnB,CAAX;AAAA,iBAAjB,C;;uBACX,SAAQmI,GAAR,CAAY1K,QAAZ,C;;;;;;;;;;;;;;;;;AAGR;;;;mCAEgBS,I,EAAMsE,E,EAAIrD,U,EAAY;AACpC,WAAKiJ,mBAAL,CAAyBlK,IAAzB,EAA+BiB,UAA/B,EAA2CkJ,IAA3C,CAAgD;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAhD,EAAsE8D,KAAtE,CAA4E9F,EAA5E;AACD;;;mCAEe+F,S,EAAW/F,E,EAAI;AAC7B,WAAKgG,mBAAL,CAAyBD,SAAzB,EAAoCF,IAApC,CAAyC;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAzC,EAA+D8D,KAA/D,CAAqE9F,EAArE;AACD;;;mCAEetE,I,EAAMsE,E,EAAI;AACxB,WAAKiG,mBAAL,CAAyBvK,IAAzB,EAA+BmK,IAA/B,CAAoC;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAApC,EAA0D8D,KAA1D,CAAgE9F,EAAhE;AACD;;;+CAE2BtE,I,EAAMsE,E,EAAI;AACpC,WAAKkG,+BAAL,CAAqCxK,IAArC,EAA2CmK,IAA3C,CAAgD;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAhD,EAAsE8D,KAAtE,CAA4E9F,EAA5E;AACD;;;8CAE0BnD,M,EAAQmD,E,EAAI;AACrC,WAAKmG,8BAAL,CAAoCtJ,MAApC,EAA4CgJ,IAA5C,CAAiD;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAjD,EAAuE8D,KAAvE,CAA6E9F,EAA7E;AACD;;;mCAEenD,M,EAAQmD,E,EAAI;AAC1B,WAAKoG,mBAAL,CAAyBvJ,MAAzB,EAAiCgJ,IAAjC,CAAsC;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAtC,EAA4D8D,KAA5D,CAAkE9F,EAAlE;AACD;;;gCAEY+F,S,EAAW/F,E,EAAI;AAC1B,WAAKR,gBAAL,CAAsBuG,SAAtB,EAAiCF,IAAjC,CAAsC;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAtC,EAA4D8D,KAA5D,CAAkE9F,EAAlE;AACD;;;mCAEenD,M,EAAQmD,E,EAAI;AAC1B,WAAKqG,mBAAL,CAAyBxJ,MAAzB,EAAiCgJ,IAAjC,CAAsC;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAtC,EAA4D8D,KAA5D,CAAkE9F,EAAlE;AACD;;;iCAEac,U,EAAYjE,M,EAAQmD,E,EAAI;AACpC,WAAKsG,iBAAL,CAAuBxF,UAAvB,EAAmCjE,MAAnC,EAA2CgJ,IAA3C,CAAgD;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAhD,EAAsE8D,KAAtE,CAA4E9F,EAA5E;AACD;;;mCAEec,U,EAAYd,E,EAAI;AAC9B,WAAKuG,mBAAL,CAAyBzF,UAAzB,EAAqC+E,IAArC,CAA0C;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAA1C,EAAgE8D,KAAhE,CAAsE9F,EAAtE;AACD;;;gCAEYc,U,EAAYd,E,EAAI;AAC3B,WAAKwG,gBAAL,CAAsB1F,UAAtB,EAAkC+E,IAAlC,CAAuC;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAAvC,EAA6D8D,KAA7D,CAAmE9F,EAAnE;AACD;;;kCAEcnD,M,EAAQmD,E,EAAI;AACzB,WAAKyG,kBAAL,CAAwB5J,MAAxB,EAAgCgJ,IAAhC,CAAqC;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAArC,EAA2D8D,KAA3D,CAAiE9F,EAAjE;AACD;;;4BAEQgB,K,EAAOhB,E,EAAI;AAClB,WAAK0G,YAAL,CAAkB1F,KAAlB,EAAyB6E,IAAzB,CAA8B;AAAA,eAAO7F,GAAG,IAAH,EAASgC,GAAT,CAAP;AAAA,OAA9B,EAAoD8D,KAApD,CAA0D9F,EAA1D;AACD;;;;;;AAGH2G,OAAOC,OAAP,GAAiBnL,iBAAjB","file":"TransloaditClient.js","sourcesContent":["const reqr = global.GENTLY ? GENTLY.hijack(require) : require\nconst got = reqr('got')\nconst FormData = require('form-data')\nconst crypto = reqr('crypto')\nconst { isObject, isArray, extend, sumBy, fromPairs } = reqr('lodash')\nconst fs = reqr('fs')\nconst { basename } = reqr('path')\nconst retry = reqr('retry')\nconst PaginationStream = reqr('./PaginationStream')\nconst tus = reqr('tus-js-client')\nconst { access, stat: fsStat } = reqr('fs').promises\n\nconst version = reqr('../package.json').version\n\nfunction unknownErrMsg (str) {\n  let buff = 'Unknown error'\n  if (str) {\n    buff += ` ${str}`\n  }\n  buff += '. Please report this at '\n  buff += 'https://github.com/transloadit/node-sdk/issues/new?title=Unknown%20error'\n  return buff\n}\n\nclass TransloaditClient {\n  constructor (opts = {}) {\n    if (opts.useSsl == null) {\n      opts.useSsl = true\n    }\n\n    if (opts.authKey == null) {\n      throw new Error('Please provide an authKey')\n    }\n\n    if (opts.authSecret == null) {\n      throw new Error('Please provide an authSecret')\n    }\n\n    this._authKey = opts.authKey\n    this._authSecret = opts.authSecret\n    this._service = opts.service || 'api2.transloadit.com'\n    this._protocol = opts.useSsl ? 'https://' : 'http://'\n    this._streams = {}\n    this._files = {}\n\n    this._lastUsedAssemblyUrl = ''\n  }\n\n  /**\n   * Adds an Assembly file stream\n   *\n   * @param {string} name fieldname of the file\n   * @param {ReadableStream} stream stream to be uploaded\n   */\n  addStream (name, stream) {\n    stream.pause()\n    this._streams[name] = stream\n  }\n\n  /**\n   * Adds an Assembly file\n   *\n   * @param {string} name field name of the file\n   * @param {string} path path to the file\n   */\n  addFile (name, path) {\n    this._files[name] = path\n  }\n\n  getLastUsedAssemblyUrl () {\n    return this._lastUsedAssemblyUrl\n  }\n\n  /**\n   * Create an Assembly\n   *\n   * @typedef {object} progressObject\n   * @property {object} assemblyProgress\n   * @property {{totalBytes: number, uploadedBytes: number}} uploadProgress\n   *\n   * @callback progressCb\n   * @param {progressObject} progress\n   *\n   * @param {object} opts assembly options\n   * @param {progressCb} progressCb callback function to be triggered as on each progress update of the assembly\n   * @returns {Promise}\n   */\n  async createAssemblyAsync (opts, progressCb) {\n    const defaultOpts = {\n      params           : {},\n      fields           : {},\n      waitForCompletion: false,\n      isResumable      : true,\n    }\n    opts = { ...defaultOpts, ...opts }\n\n    this._lastUsedAssemblyUrl = `${this._serviceUrl()}/assemblies`\n\n    for (const [, path] of Object.entries(this._files)) {\n      await access(path, fs.F_OK | fs.R_OK)\n    }\n\n    // Fileless streams\n    const streamsMap = fromPairs(Object.entries(this._streams).map(([label, stream]) => [label, { stream }]))\n\n    // Create streams from files\n    for (const [label, path] of Object.entries(this._files)) {\n      const stream = fs.createReadStream(path)\n      stream.pause()\n      streamsMap[label] = { stream, path }\n    }\n\n    // reset streams/files so they do not get used again in subsequent requests\n    this._streams = {}\n    this._files = {}\n\n    const streams = Object.values(streamsMap)\n\n    // If any stream emits error, we want to handle this and exit with error\n    const streamErrorPromise = new Promise((resolve, reject) => {\n      streams.forEach(({ stream }) => stream.on('error', reject))\n    })\n\n    const createAssemblyAndUpload = async () => {\n      const requestOpts = {\n        url    : this._lastUsedAssemblyUrl,\n        method : 'post',\n        timeout: 24 * 60 * 60 * 1000, // 1 day\n        params : opts.params,\n        fields : opts.fields,\n      }\n\n      // const useTus = false\n      const useTus = opts.isResumable && streams.every(({ path }) => path)\n\n      if (useTus) {\n        requestOpts.tus_num_expected_upload_files = streams.length\n      } else if (opts.isResumable) {\n        console.warn('disabling resumability because the size of one or more streams cannot be determined')\n      }\n\n      // upload as form multipart or tus?\n      const formUploadStreamsMap = useTus ? {} : streamsMap\n      const tusStreamsMap = useTus ? streamsMap : {}\n\n      const result = await this._remoteJson(requestOpts, formUploadStreamsMap)\n\n      // TODO should do this for all requests?\n      if (result.error != null) throw new Error(result.error)\n\n      if (useTus && Object.keys(tusStreamsMap).length > 0) {\n        await this._sendTusRequest(tusStreamsMap, { waitForCompletion: opts.waitForCompletion, assembly: result }, progressCb)\n      }\n\n      if (!opts.waitForCompletion) return result\n      return this.awaitAssemblyCompletion(result.assembly_id, progressCb)\n    }\n\n    return Promise.race([createAssemblyAndUpload(), streamErrorPromise])\n  }\n\n  async awaitAssemblyCompletion (assemblyId, progressCb) {\n    const result = await this.getAssemblyAsync(assemblyId)\n    if (result.error != null) throw new Error(result.error)\n\n    if (result.ok === 'ASSEMBLY_COMPLETED') return result\n\n    if (result.ok === 'ASSEMBLY_UPLOADING' || result.ok === 'ASSEMBLY_EXECUTING') {\n      if (progressCb) progressCb({ assemblyProgress: result })\n\n      await new Promise((resolve) => setTimeout(resolve, 1 * 1000))\n      // Recurse\n      return this.awaitAssemblyCompletion(assemblyId, progressCb)\n    }\n\n    throw new Error(unknownErrMsg(`while processing Assembly ID ${assemblyId}`))\n  }\n\n  /**\n   * Delete the assembly\n   *\n   * @param {string} assemblyId assembly ID\n   * @returns {Promise} after the assembly is deleted\n   */\n  async deleteAssemblyAsync (assemblyId) {\n    // eslint-disable-next-line camelcase\n    const { assembly_url } = await this.getAssemblyAsync(assemblyId) || {}\n\n    const opts = {\n      url    : assembly_url,\n      timeout: 5000,\n      method : 'delete',\n    }\n\n    return this._remoteJson(opts)\n  }\n\n  /**\n   * Replay an Assembly\n   *\n   * @typedef {object} replayOptions\n   * @property {string} assembly_id\n   * @property {string} notify_url\n   *\n   * @param {replayOptions} opts options defining the Assembly to replay\n   * @returns {Promise} after the replay is started\n   */\n  async replayAssemblyAsync (opts) {\n    const { assembly_id: assemblyId, notify_url: notifyUrl } = opts\n    const requestOpts = {\n      url   : this._serviceUrl() + `/assemblies/${assemblyId}/replay`,\n      method: 'post',\n    }\n\n    if (notifyUrl != null) {\n      requestOpts.params = { notifyUrl }\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  /**\n   * Replay an Assembly notification\n   *\n   * @param {replayOptions} opts options defining the Assembly to replay\n   * @returns {Promise} after the replay is started\n   */\n  async replayAssemblyNotificationAsync ({ assembly_id: assemblyId, notify_url: notifyUrl }) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/assembly_notifications/${assemblyId}/replay`,\n      method: 'post',\n    }\n\n    if (notifyUrl != null) {\n      requestOpts.params = { notifyUrl }\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  /**\n   * List all assembly notifications\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} the list of Assembly notifications\n   */\n  async listAssemblyNotificationsAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/assembly_notifications`,\n      method: 'get',\n      params: params || {},\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  streamAssemblyNotifications (params) {\n    return new PaginationStream((page, cb) => {\n      this.listAssemblyNotifications({ ...params, page }, cb)\n    })\n  }\n\n  /**\n   * List all assemblies\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} list of Assemblies\n   */\n  async listAssembliesAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/assemblies`,\n      method: 'get',\n      params: params || {},\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  streamAssemblies (params) {\n    return new PaginationStream((page, cb) => {\n      this.listAssemblies({ ...params, page }, cb)\n    })\n  }\n\n  /**\n   * Get an Assembly\n   *\n   * @param {string} assemblyId the Assembly Id\n   * @returns {Promise} the retrieved Assembly\n   */\n  async getAssemblyAsync (assemblyId) {\n    const opts = { url: this._serviceUrl() + `/assemblies/${assemblyId}` }\n\n    const retryOpts = {\n      retries   : 5,\n      factor    : 3.28,\n      minTimeout: 1 * 1000,\n      maxTimeout: 8 * 1000,\n    }\n\n    return new Promise((resolve, reject) => {\n      const operation = retry.operation(retryOpts)\n      operation.attempt(async (attempt) => {\n        try {\n          const result = await this._remoteJson(opts)\n\n          if (result.assembly_url == null || result.assembly_ssl_url == null) {\n            if (operation.retry(new Error('got incomplete assembly status response'))) {\n              return\n            }\n\n            return reject(operation.mainError())\n          }\n\n          return resolve(result)\n        } catch (err) {\n          if (operation.retry(err)) {\n            return\n          }\n\n          return reject(operation.mainError())\n        }\n      })\n    })\n  }\n\n  /**\n   * Create an Assembly Template\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} when the template is created\n   */\n  async createTemplateAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates`,\n      method: 'post',\n      params: params || {},\n    }\n\n    const result = await this._remoteJson(requestOpts)\n    if (result && result.ok) {\n      return result\n    }\n\n    let left\n    throw new Error((left = result.error != null ? result.error : result.message) != null ? left : unknownErrMsg('while creating Template'))\n  }\n\n  /**\n   * Edit an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @param {object} params optional request options\n   * @returns {Promise} when the template is edited\n   */\n  async editTemplateAsync (templateId, params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates/${templateId}`,\n      method: 'put',\n      params: params || {},\n    }\n\n    const result = await this._remoteJson(requestOpts)\n    if (result && result.ok) {\n      return result\n    }\n\n    let left\n    throw new Error((left = result.error != null ? result.error : result.message) != null ? left : unknownErrMsg)\n  }\n\n  /**\n   * Delete an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @returns {Promise} when the template is deleted\n   */\n  async deleteTemplateAsync (templateId) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/templates/${templateId}`,\n      method: 'delete',\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  /**\n   * Get an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @returns {Promise} when the template is retrieved\n   */\n  async getTemplateAsync (templateId) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates/${templateId}`,\n      method: 'get',\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  /**\n   * List all Assembly Templates\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} the list of templates\n   */\n  async listTemplatesAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates`,\n      method: 'get',\n      params: params || {},\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  streamTemplates (params) {\n    return new PaginationStream((page, cb) => {\n      this.listTemplates({ ...params, page }, cb)\n    })\n  }\n\n  /**\n   * Get account Billing details for a specific month\n   *\n   * @param {string} month the date for the required billing in the format yyyy-mm\n   * @returns {Promise} with billing data\n   */\n  async getBillAsync (month) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/bill/${month}`,\n      method: 'get',\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  calcSignature (params) {\n    const jsonParams = this._prepareParams(params)\n    const signature = this._calcSignature(jsonParams)\n\n    return { signature, params: jsonParams }\n  }\n\n  _calcSignature (toSign) {\n    return crypto\n      .createHmac('sha1', this._authSecret)\n      .update(Buffer.from(toSign, 'utf-8'))\n      .digest('hex')\n  }\n\n  // Sets the multipart/form-data for POST, PUT and DELETE requests, including\n  // the streams, the signed params, and any additional fields.\n  _appendForm (form, params, streamsMap, fields) {\n    const sigData = this.calcSignature(params)\n    const jsonParams = sigData.params\n    const { signature } = sigData\n\n    form.append('params', jsonParams)\n\n    if (fields != null) {\n      for (let [key, val] of Object.entries(fields)) {\n        // TODO isn't an array already an object?\n        if (isObject(val) || isArray(val)) {\n          val = JSON.stringify(val)\n        }\n        form.append(key, val)\n      }\n    }\n\n    form.append('signature', signature)\n\n    if (streamsMap) {\n      Object.entries(streamsMap).forEach(([label, { stream, path }]) => {\n        const options = path ? undefined : { filename: label } // https://github.com/transloadit/node-sdk/issues/86\n        form.append(label, stream, options)\n      })\n    }\n  }\n\n  // Implements HTTP GET query params, handling the case where the url already\n  // has params.\n  _appendParamsToUrl (url, params) {\n    const sigData = this.calcSignature(params)\n    const { signature } = sigData\n    let jsonParams = sigData.params\n\n    // TODO could be improved (potentially buggy)\n    if (url.indexOf('?') === -1) {\n      url += `?signature=${signature}`\n    } else {\n      url += `&signature=${signature}`\n    }\n\n    jsonParams = encodeURIComponent(jsonParams)\n    url += `&params=${jsonParams}`\n\n    return url\n  }\n\n  // Responsible for including auth parameters in all requests\n  _prepareParams (params) {\n    if (params == null) {\n      params = {}\n    }\n    if (params.auth == null) {\n      params.auth = {}\n    }\n    if (params.auth.key == null) {\n      params.auth.key = this._authKey\n    }\n    if (params.auth.expires == null) {\n      params.auth.expires = this._getExpiresDate()\n    }\n\n    return JSON.stringify(params)\n  }\n\n  _getExpiresDate () {\n    const expiresDate = new Date()\n    expiresDate.setDate(expiresDate.getDate() + 1)\n    return expiresDate.toISOString()\n  }\n\n  _serviceUrl () {\n    return this._protocol + this._service\n  }\n\n  // Wrapper around __remoteJson which will retry in case of error\n  async _remoteJson (opts, streamsMap) {\n    const operation = retry.operation({\n      retries   : 5,\n      factor    : 3.28,\n      minTimeout: 1 * 1000,\n      maxTimeout: 8 * 1000,\n    })\n\n    return new Promise((resolve, reject) => {\n      operation.attempt(async () => {\n        try {\n          resolve(await this.__remoteJson(opts, streamsMap))\n        } catch (err) {\n          if (err.error === 'RATE_LIMIT_REACHED') {\n            console.warn(`Rate limit reached, retrying request in ${err.info.retryIn} seconds.`)\n            // FIXME uses private internals of node-retry\n            operation._timeouts.unshift(1000 * err.info.retryIn)\n            return operation.retry(err)\n          }\n\n          if (err.code === 'ENOTFOUND') {\n            console.warn('The network connection is down, retrying request in 3 seconds.')\n            // FIXME uses private internals of node-retry\n            operation._timeouts.unshift(3 * 1000)\n            return operation.retry(err)\n          }\n\n          if (err.error === 'GET_ACCOUNT_UNKNOWN_AUTH_KEY') {\n            console.warn('Invalid auth key provided.')\n            return reject(err)\n          }\n\n          if (err.error !== undefined) {\n            const msg = []\n            if (err.error) { msg.push(err.error) }\n            if (opts.url) { msg.push(opts.url) }\n            if (err.message) { msg.push(err.message) }\n\n            console.warn(msg.join(' - '))\n            return reject(err)\n          }\n\n          if (operation.retry(err)) {\n            return\n          }\n\n          reject(operation.mainError())\n        }\n      })\n    })\n  }\n\n  // Responsible for making API calls. Automatically sends streams with any POST,\n  // PUT or DELETE requests. Automatically adds signature parameters to all\n  // requests. Also automatically parses the JSON response.\n  async __remoteJson (opts, streamsMap) {\n    const timeout = opts.timeout || 5000\n    let url = opts.url || null\n    const method = opts.method || 'get'\n    const params = opts.params || {}\n\n    if (!url) {\n      throw new Error('No url provided!')\n    }\n\n    if (method === 'get') {\n      url = this._appendParamsToUrl(url, params)\n    }\n\n    let form\n\n    if (method === 'post' || method === 'put' || method === 'delete') {\n      const extraData = { ...opts.fields }\n      if (opts.tus_num_expected_upload_files) {\n        extraData.tus_num_expected_upload_files = opts.tus_num_expected_upload_files\n      }\n      form = new FormData()\n      this._appendForm(form, params, streamsMap, extraData)\n    }\n\n    const uploadingStreams = streamsMap && Object.keys(streamsMap).length > 0\n\n    const requestOpts = {\n      body   : form,\n      timeout,\n      headers: {\n        'Transloadit-Client': `node-sdk:${version}`,\n        ...opts.headers,\n      },\n      responseType: 'json',\n    }\n\n    // https://github.com/form-data/form-data/issues/394#issuecomment-573595015\n    if (uploadingStreams) requestOpts.headers['transfer-encoding'] = 'chunked'\n\n    try {\n      const { body } = await got[method](url, requestOpts)\n      return body\n    } catch (err) {\n      if (err instanceof got.HTTPError) {\n        const { statusCode, body } = err.response\n        // console.log(statusCode, body)\n\n        if (statusCode === 404 || statusCode > 599) { // TODO why is this needed?\n          return body\n        }\n\n        const extendedMessage = {}\n        if (body.message && body.error) {\n          extendedMessage.message = `${body.error}: ${body.message}`\n        }\n        throw extend(new Error(), body, extendedMessage)\n      }\n\n      throw err\n    }\n  }\n\n  async _sendTusRequest (streamsMap, opts, onProgress) {\n    const streamLabels = Object.keys(streamsMap)\n\n    let totalBytes = 0\n    let lastEmittedProgress = 0\n    onProgress = onProgress || (() => {})\n\n    const sizes = {}\n\n    // Initialize data\n    for (const label of streamLabels) {\n      const { path } = streamsMap[label]\n\n      if (path) {\n        const { size } = await fsStat(path)\n        sizes[label] = size\n        totalBytes += size\n      }\n    }\n\n    const uploadProgresses = {}\n\n    async function uploadSingleStream (label) {\n      uploadProgresses[label] = 0\n\n      const { stream, path } = streamsMap[label]\n      const size = sizes[label]\n\n      const onTusProgress = (bytesUploaded) => {\n        uploadProgresses[label] = bytesUploaded\n\n        // get all uploaded bytes for all files\n        const uploadedBytes = sumBy(streamLabels, (label) => uploadProgresses[label])\n\n        // don't send redundant progress\n        if (lastEmittedProgress < uploadedBytes) {\n          lastEmittedProgress = uploadedBytes\n          onProgress({ uploadProgress: { uploadedBytes, totalBytes } })\n        }\n      }\n\n      const filename = path ? basename(path) : label\n\n      await new Promise((resolve, reject) => {\n        const tusUpload = new tus.Upload(stream, {\n          endpoint: opts.assembly.tus_url,\n          resume  : true,\n          metadata: {\n            assembly_url: opts.assembly.assembly_ssl_url,\n            fieldname   : label,\n            filename,\n          },\n          uploadSize: size,\n          onError   : reject,\n          onProgress: onTusProgress,\n          onSuccess : resolve,\n        })\n\n        tusUpload.start()\n      })\n\n      // console.log(label, 'upload done')\n    }\n\n    // TODO throttle concurrency? Can use p-map\n    const promises = streamLabels.map((label) => uploadSingleStream(label))\n    await Promise.all(promises)\n  }\n\n  // Legacy callback endpoints: TODO remove?\n\n  createAssembly (opts, cb, progressCb) {\n    this.createAssemblyAsync(opts, progressCb).then(val => cb(null, val)).catch(cb)\n  }\n\n  deleteAssembly (assembyId, cb) {\n    this.deleteAssemblyAsync(assembyId).then(val => cb(null, val)).catch(cb)\n  }\n\n  replayAssembly (opts, cb) {\n    this.replayAssemblyAsync(opts).then(val => cb(null, val)).catch(cb)\n  }\n\n  replayAssemblyNotification (opts, cb) {\n    this.replayAssemblyNotificationAsync(opts).then(val => cb(null, val)).catch(cb)\n  }\n\n  listAssemblyNotifications (params, cb) {\n    this.listAssemblyNotificationsAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  listAssemblies (params, cb) {\n    this.listAssembliesAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  getAssembly (assembyId, cb) {\n    this.getAssemblyAsync(assembyId).then(val => cb(null, val)).catch(cb)\n  }\n\n  createTemplate (params, cb) {\n    this.createTemplateAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  editTemplate (templateId, params, cb) {\n    this.editTemplateAsync(templateId, params).then(val => cb(null, val)).catch(cb)\n  }\n\n  deleteTemplate (templateId, cb) {\n    this.deleteTemplateAsync(templateId).then(val => cb(null, val)).catch(cb)\n  }\n\n  getTemplate (templateId, cb) {\n    this.getTemplateAsync(templateId).then(val => cb(null, val)).catch(cb)\n  }\n\n  listTemplates (params, cb) {\n    this.listTemplatesAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  getBill (month, cb) {\n    this.getBillAsync(month).then(val => cb(null, val)).catch(cb)\n  }\n}\n\nmodule.exports = TransloaditClient\n"]}