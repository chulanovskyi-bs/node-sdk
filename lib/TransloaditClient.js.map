{"version":3,"sources":["../src/TransloaditClient.js"],"names":["reqr","global","GENTLY","hijack","require","got","FormData","crypto","_","fs","path","retry","PaginationStream","Readable","tus","access","promises","version","unknownErrMsg","str","buff","canGetStreamSizes","streams","stream","httpModule","TransloaditClient","opts","useSsl","authKey","Error","authSecret","_authKey","_authSecret","_service","service","_protocol","_streams","_lastUsedAssemblyUrl","name","pause","createReadStream","on","console","error","err","addStream","cb","progressCb","createAssemblyAsync","then","val","catch","defaultOpts","params","fields","waitForCompletion","isResumable","_serviceUrl","requestOpts","url","method","timeout","streamsMap","Object","values","useTus","tusStreamsMap","tus_num_expected_upload_files","length","warn","streamErrorPromise","resolve","reject","forEach","mainPromise","F_OK","R_OK","_remoteJson","result","keys","_sendTusRequest","assembly","awaitAssemblyCompletion","assembly_id","race","assemblyId","getAssemblyAsync","ok","assemblyProgress","setTimeout","assembyId","deleteAssemblyAsync","getAssembly","assembly_url","replayAssembly","notifyUrl","notify_url","replayAssemblyNotificationAsync","listAssemblyNotificationsAsync","page","listAssemblyNotifications","listAssembliesAsync","listAssemblies","retryOpts","retries","factor","minTimeout","maxTimeout","operation","attempt","assembly_ssl_url","mainError","createTemplateAsync","left","message","templateId","editTemplateAsync","deleteTemplateAsync","getTemplateAsync","listTemplatesAsync","listTemplates","month","getBillAsync","jsonParams","_prepareParams","signature","_calcSignature","toSign","createHmac","update","Buffer","from","digest","form","sigData","calcSignature","append","entries","key","isObject","isArray","JSON","stringify","value","indexOf","encodeURIComponent","auth","expires","_getExpiresDate","expiresDate","Date","setDate","getDate","toISOString","__remoteJson","info","retryIn","_timeouts","unshift","code","undefined","msg","push","join","_appendParamsToUrl","extraData","_appendForm","body","headers","responseType","statusCode","extendedMessage","extend","onProgress","streamLabels","uploadsDone","totalBytes","lastEmittedProgress","uploadProgresses","label","file","stat","size","uploadSize","onTusProgress","bytesUploaded","uploadedBytes","reduce","label1","label2","uploadProgress","filename","basename","tusUpload","Upload","endpoint","tus_url","resume","metadata","fieldname","onError","onSuccess","start","module","exports"],"mappings":"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","file":"TransloaditClient.js","sourcesContent":["const reqr = global.GENTLY ? GENTLY.hijack(require) : require\nconst got = reqr('got')\nconst FormData = require('form-data')\nconst crypto = reqr('crypto')\nconst _ = reqr('underscore')\nconst fs = reqr('fs')\nconst path = reqr('path')\nconst retry = reqr('retry')\nconst PaginationStream = reqr('./PaginationStream')\nconst Readable = reqr('stream').Readable\nconst tus = reqr('tus-js-client')\nconst { access } = reqr('fs').promises\n\n\nconst version = reqr('../package.json').version\n\nfunction unknownErrMsg (str) {\n  let buff = 'Unknown error'\n  if (str) {\n    buff += ` ${str}`\n  }\n  buff += '. Please report this at '\n  buff += 'https://github.com/transloadit/node-sdk/issues/new?title=Unknown%20error'\n  return buff\n}\n\n// @todo support size retrieval for other streams\nfunction canGetStreamSizes (streams) {\n  for (const stream of streams) {\n    // the request module has path attribute that is different from file path\n    // but it also has the attribute httpModule\n    if (!(stream.path && !stream.httpModule)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nclass TransloaditClient {\n  constructor (opts = {}) {\n    if (opts.useSsl == null) {\n      opts.useSsl = true\n    }\n\n    if (opts.authKey == null) {\n      throw new Error('Please provide an authKey')\n    }\n\n    if (opts.authSecret == null) {\n      throw new Error('Please provide an authSecret')\n    }\n\n    this._authKey = opts.authKey\n    this._authSecret = opts.authSecret\n    this._service = opts.service || 'api2.transloadit.com'\n    this._protocol = opts.useSsl ? 'https://' : 'http://'\n    this._streams = {}\n\n    this._lastUsedAssemblyUrl = ''\n  }\n\n  /**\n   * Adds an Assembly file stream\n   *\n   * @param {string} name fieldname of the file\n   * @param {ReadableStream} stream stream to be uploaded\n   */\n  addStream (name, stream) {\n    stream.pause()\n    this._streams[name] = stream\n  }\n\n  /**\n   * Adds an Assembly file\n   *\n   * @param {string} name field name of the file\n   * @param {string} path path to the file\n   */\n  addFile (name, path) {\n    const stream = fs.createReadStream(path)\n    stream.on('error', err => {\n      // handle the error event to avoid the error being thrown\n      console.error(err)\n\n      if (this._streams[name]) {\n        delete this._streams[name]\n      }\n    })\n    this.addStream(name, stream)\n  }\n\n  getLastUsedAssemblyUrl () {\n    return this._lastUsedAssemblyUrl\n  }\n\n  createAssembly (opts, cb, progressCb) {\n    return this.createAssemblyAsync(opts, progressCb).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Create an Assembly\n   *\n   * @typedef {object} progressObject\n   * @property {object} assemblyProgress\n   * @property {{totalBytes: number, uploadedBytes: number}} uploadProgress\n   *\n   * @callback onProgress\n   * @param {progressObject} progress\n   *\n   * @param {object} opts assembly options\n   * @param {onProgress} progressCb callback function to be triggered as on each progress update of the assembly\n   * @returns {Promise}\n   */\n  async createAssemblyAsync (opts, progressCb) {\n    const defaultOpts = {\n      params           : {},\n      fields           : {},\n      waitForCompletion: false,\n      isResumable      : true,\n    }\n    opts = { ...defaultOpts, ...opts }\n\n    this._lastUsedAssemblyUrl = `${this._serviceUrl()}/assemblies`\n\n    const requestOpts = {\n      url    : this._lastUsedAssemblyUrl,\n      method : 'post',\n      timeout: 24 * 60 * 60 * 1000, // 1 day\n      params : opts.params,\n      fields : opts.fields,\n    }\n\n    let streamsMap = this._streams\n    let streams = Object.values(streamsMap)\n\n    // reset streams so they do not get used again in subsequent requests\n    this._streams = {}\n\n    // TODO imrpvoe all this\n    const useTus = opts.isResumable && canGetStreamSizes(streams)\n    const tusStreamsMap = useTus ? streamsMap : {}\n    if (useTus) {\n      requestOpts.tus_num_expected_upload_files = streams.length\n      // make sure they don't get uploaded as multipart (will use tus instead)\n      streamsMap = {}\n      streams = []\n    } else if (opts.isResumable) {\n      opts.isResumable = false\n      console.warn('disabling resumability because the size of one or more streams cannot be determined')\n    }\n\n    // If any stream emits error, we exit with error\n    const streamErrorPromise = new Promise((resolve, reject) => {\n      streams.forEach((stream) => stream.on('error', reject))\n    })\n\n    const mainPromise = (async () => {\n      for (const stream of streams) {\n        // because an http response stream could also have a \"path\"\n        // attribute but not referring to the local file system\n        // see https://github.com/transloadit/node-sdk/pull/50#issue-261982855\n        if (!stream.path == null && stream instanceof Readable) {\n          await access(stream.path, fs.F_OK | fs.R_OK)\n        }\n      }\n\n      const result = await this._remoteJson(requestOpts, streamsMap)\n\n      if (result.error != null) throw new Error(result.error)\n\n      if (useTus && Object.keys(tusStreamsMap).length > 0) {\n        await this._sendTusRequest(tusStreamsMap, { waitForCompletion: opts.waitForCompletion, assembly: result }, progressCb)\n      }\n\n      if (!opts.waitForCompletion) return result\n      return this.awaitAssemblyCompletion(result.assembly_id, progressCb)\n    })()\n\n    return Promise.race([mainPromise, streamErrorPromise])\n  }\n\n  async awaitAssemblyCompletion (assemblyId, progressCb) {\n    const result = await this.getAssemblyAsync(assemblyId)\n    if (result.error != null) throw new Error(result.error)\n\n    if (result.ok === 'ASSEMBLY_COMPLETED') return result\n\n    if (result.ok === 'ASSEMBLY_UPLOADING' || result.ok === 'ASSEMBLY_EXECUTING') {\n      if (progressCb) progressCb({ assemblyProgress: result })\n\n      await new Promise((resolve) => setTimeout(resolve, 1 * 1000))\n      // Recurse\n      return this.awaitAssemblyCompletion(assemblyId, progressCb)\n    }\n\n    throw new Error(unknownErrMsg(`while processing Assembly ID ${assemblyId}`))\n  }\n\n  deleteAssembly (assembyId, cb) {\n    return this.deleteAssemblyAsync(assembyId).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Delete the assembly\n   *\n   * @param {string} assemblyId assembly ID\n   * @returns {Promise} after the assembly is deleted\n   */\n  async deleteAssemblyAsync (assemblyId) {\n    // eslint-disable-next-line camelcase\n    const { assembly_url } = this.getAssembly(assemblyId) || {}\n\n    const opts = {\n      url    : assembly_url,\n      timeout: 5000,\n      method : 'delete',\n    }\n\n    return this._remoteJson(opts)\n  }\n\n  replayAssembly (opts, cb) {\n    return this.replayAssembly(opts).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Replay an Assembly\n   *\n   * @typedef {object} replayOptions\n   * @property {string} assembly_id\n   * @property {string} notify_url\n   *\n   * @param {replayOptions} opts options defining the Assembly to replay\n   * @returns {Promise} after the replay is started\n   */\n  async replayAssemblyAsync (opts) {\n    const { assembly_id: assemblyId, notify_url: notifyUrl } = opts\n    const requestOpts = {\n      url   : this._serviceUrl() + `/assemblies/${assemblyId}/replay`,\n      method: 'post',\n    }\n\n    if (notifyUrl != null) {\n      requestOpts.params = { notifyUrl }\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  replayAssemblyNotification (opts, cb) {\n    return this.replayAssemblyNotificationAsync(opts).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Replay an Assembly notification\n   *\n   * @param {replayOptions} opts options defining the Assembly to replay\n   * @returns {Promise} after the replay is started\n   */\n  async replayAssemblyNotificationAsync ({ assembly_id: assemblyId, notify_url: notifyUrl }) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/assembly_notifications/${assemblyId}/replay`,\n      method: 'post',\n    }\n\n    if (notifyUrl != null) {\n      requestOpts.params = { notifyUrl }\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  listAssemblyNotifications (params, cb) {\n    return this.listAssemblyNotificationsAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * List all assembly notifications\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} the list of Assembly notifications\n   */\n  async listAssemblyNotificationsAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/assembly_notifications`,\n      method: 'get',\n      params: params || {},\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  streamAssemblyNotifications (params) {\n    return new PaginationStream((page, cb) => {\n      this.listAssemblyNotifications({ ...params, page }, cb)\n    })\n  }\n\n  listAssemblies (params, cb) {\n    return this.listAssembliesAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * List all assemblies\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} list of Assemblies\n   */\n  async listAssembliesAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/assemblies`,\n      method: 'get',\n      params: params || {},\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  streamAssemblies (params) {\n    return new PaginationStream((page, cb) => {\n      this.listAssemblies({ ...params, page }, cb)\n    })\n  }\n\n  getAssembly (assembyId, cb) {\n    return this.getAssemblyAsync(assembyId).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Get an Assembly\n   *\n   * @param {string} assemblyId the Assembly Id\n   * @returns {Promise} the retrieved Assembly\n   */\n  async getAssemblyAsync (assemblyId) {\n    const opts = { url: this._serviceUrl() + `/assemblies/${assemblyId}` }\n\n    const retryOpts = {\n      retries   : 5,\n      factor    : 3.28,\n      minTimeout: 1 * 1000,\n      maxTimeout: 8 * 1000,\n    }\n\n    return new Promise((resolve, reject) => {\n      const operation = retry.operation(retryOpts)\n      operation.attempt(async (attempt) => {\n        try {\n          const result = await this._remoteJson(opts)\n\n          if (result.assembly_url == null || result.assembly_ssl_url == null) {\n            if (operation.retry(new Error('got incomplete assembly status response'))) {\n              return\n            }\n\n            return reject(operation.mainError())\n          }\n\n          return resolve(result)\n        } catch (err) {\n          if (operation.retry(err)) {\n            return\n          }\n\n          return reject(operation.mainError())\n        }\n      })\n    })\n  }\n\n  createTemplate (params, cb) {\n    return this.createTemplateAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Create an Assembly Template\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} when the template is created\n   */\n  async createTemplateAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates`,\n      method: 'post',\n      params: params || {},\n    }\n\n    const result = await this._remoteJson(requestOpts)\n    if (result && result.ok) {\n      return result\n    }\n\n    let left\n    throw new Error((left = result.error != null ? result.error : result.message) != null ? left : unknownErrMsg('while creating Template'))\n  }\n\n  editTemplate (templateId, params, cb) {\n    return this.editTemplateAsync(templateId, params).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Edit an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @param {object} params optional request options\n   * @returns {Promise} when the template is edited\n   */\n  async editTemplateAsync (templateId, params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates/${templateId}`,\n      method: 'put',\n      params: params || {},\n    }\n\n    const result = await this._remoteJson(requestOpts)\n    if (result && result.ok) {\n      return result\n    }\n\n    let left\n    throw new Error((left = result.error != null ? result.error : result.message) != null ? left : unknownErrMsg)\n  }\n\n  deleteTemplate (templateId, cb) {\n    return this.deleteTemplateAsync(templateId).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Delete an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @returns {Promise} when the template is deleted\n   */\n  async deleteTemplateAsync (templateId) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/templates/${templateId}`,\n      method: 'delete',\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  getTemplate (templateId, cb) {\n    return this.getTemplateAsync(templateId).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Get an Assembly Template\n   *\n   * @param {string} templateId the template ID\n   * @returns {Promise} when the template is retrieved\n   */\n  async getTemplateAsync (templateId) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates/${templateId}`,\n      method: 'get',\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  listTemplates (params, cb) {\n    return this.listTemplatesAsync(params).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * List all Assembly Templates\n   *\n   * @param {object} params optional request options\n   * @returns {Promise} the list of templates\n   */\n  async listTemplatesAsync (params) {\n    const requestOpts = {\n      url   : `${this._serviceUrl()}/templates`,\n      method: 'get',\n      params: params || {},\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  streamTemplates (params) {\n    return new PaginationStream((page, cb) => {\n      this.listTemplates({ ...params, page }, cb)\n    })\n  }\n\n  getBill (month, cb) {\n    return this.getBillAsync(month).then(val => cb(null, val)).catch(cb)\n  }\n\n  /**\n   * Get account Billing details for a specific month\n   *\n   * @param {string} month the date for the required billing in the format yyyy-mm\n   * @returns {Promise} with billing data\n   */\n  async getBillAsync (month) {\n    const requestOpts = {\n      url   : this._serviceUrl() + `/bill/${month}`,\n      method: 'get',\n    }\n\n    return this._remoteJson(requestOpts)\n  }\n\n  calcSignature (params) {\n    const jsonParams = this._prepareParams(params)\n    const signature = this._calcSignature(jsonParams)\n\n    return { signature, params: jsonParams }\n  }\n\n  _calcSignature (toSign) {\n    return crypto\n      .createHmac('sha1', this._authSecret)\n      .update(Buffer.from(toSign, 'utf-8'))\n      .digest('hex')\n  }\n\n  // Sets the multipart/form-data for POST, PUT and DELETE requests, including\n  // the streams, the signed params, and any additional fields.\n  _appendForm (form, params, streamsMap, fields) {\n    const sigData = this.calcSignature(params)\n    const jsonParams = sigData.params\n    const { signature } = sigData\n\n    form.append('params', jsonParams)\n\n    if (fields != null) {\n      for (let [key, val] of Object.entries(fields)) {\n        if (_.isObject(val) || _.isArray(val)) {\n          val = JSON.stringify(val)\n        }\n        form.append(key, val)\n      }\n    }\n\n    form.append('signature', signature)\n\n    if (streamsMap) Object.entries(streamsMap).forEach(([key, value]) => form.append(key, value))\n  }\n\n  // Implements HTTP GET query params, handling the case where the url already\n  // has params.\n  _appendParamsToUrl (url, params) {\n    const sigData = this.calcSignature(params)\n    const { signature } = sigData\n    let jsonParams = sigData.params\n\n    // TODO could be improved (potentially buggy)\n    if (url.indexOf('?') === -1) {\n      url += `?signature=${signature}`\n    } else {\n      url += `&signature=${signature}`\n    }\n\n    jsonParams = encodeURIComponent(jsonParams)\n    url += `&params=${jsonParams}`\n\n    return url\n  }\n\n  // Responsible for including auth parameters in all requests\n  _prepareParams (params) {\n    if (params == null) {\n      params = {}\n    }\n    if (params.auth == null) {\n      params.auth = {}\n    }\n    if (params.auth.key == null) {\n      params.auth.key = this._authKey\n    }\n    if (params.auth.expires == null) {\n      params.auth.expires = this._getExpiresDate()\n    }\n\n    return JSON.stringify(params)\n  }\n\n  _getExpiresDate () {\n    const expiresDate = new Date()\n    expiresDate.setDate(expiresDate.getDate() + 1)\n    return expiresDate.toISOString()\n  }\n\n  _serviceUrl () {\n    return this._protocol + this._service\n  }\n\n  // Wrapper around __remoteJson which will retry in case of error\n  async _remoteJson (opts, streamsMap) {\n    const operation = retry.operation({\n      retries   : 5,\n      factor    : 3.28,\n      minTimeout: 1 * 1000,\n      maxTimeout: 8 * 1000,\n    })\n\n    return new Promise((resolve, reject) => {\n      operation.attempt(async () => {\n        try {\n          const result = await this.__remoteJson(opts, streamsMap)\n          resolve(result)\n        } catch (err) {\n          if (err.error === 'RATE_LIMIT_REACHED') {\n            console.warn(`Rate limit reached, retrying request in ${err.info.retryIn} seconds.`)\n            // FIXME uses private internals of node-retry\n            operation._timeouts.unshift(1000 * err.info.retryIn)\n            return operation.retry(err)\n          }\n\n          if (err.code === 'ENOTFOUND') {\n            console.warn('The network connection is down, retrying request in 3 seconds.')\n            // FIXME uses private internals of node-retry\n            operation._timeouts.unshift(3 * 1000)\n            return operation.retry(err)\n          }\n\n          if (err.error === 'GET_ACCOUNT_UNKNOWN_AUTH_KEY') {\n            console.warn('Invalid auth key provided.')\n            return reject(err)\n          }\n\n          if (err.error !== undefined) {\n            const msg = []\n            if (err.error) { msg.push(err.error) }\n            if (opts.url) { msg.push(opts.url) }\n            if (err.message) { msg.push(err.message) }\n\n            console.warn(msg.join(' - '))\n            return reject(err)\n          }\n\n          // TODO test (throw a random test error)\n          if (operation.retry(err)) {\n            return\n          }\n\n          reject(operation.mainError())\n        }\n      })\n    })\n  }\n\n  // Responsible for making API calls. Automatically sends streams with any POST,\n  // PUT or DELETE requests. Automatically adds signature parameters to all\n  // requests. Also automatically parses the JSON response.\n  async __remoteJson (opts, streamsMap) {\n    const timeout = opts.timeout || 5000\n    let url = opts.url || null\n    const method = opts.method || 'get'\n\n    if (!url) {\n      throw new Error('No url provided!')\n    }\n\n    if (method === 'get' && opts.params != null) {\n      url = this._appendParamsToUrl(url, opts.params)\n    }\n\n    let form\n\n    if (method === 'post' || method === 'put' || method === 'delete') {\n      const extraData = { ...opts.fields }\n      if (opts.tus_num_expected_upload_files) {\n        extraData.tus_num_expected_upload_files = opts.tus_num_expected_upload_files\n      }\n      form = new FormData()\n      this._appendForm(form, opts.params, streamsMap, extraData)\n    }\n\n    const requestOpts = {\n      body   : form,\n      timeout,\n      headers: {\n        // 'transfer-encoding': 'chunked',\n        'Transloadit-Client': `node-sdk:${version}`,\n        ...opts.headers,\n      },\n      responseType: 'json',\n    }\n\n    // form.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\n    const { body: result, statusCode } = await got[method](url, requestOpts)\n\n    if (statusCode !== 200 && statusCode !== 404 && statusCode >= 400 && statusCode <= 599) {\n      const extendedMessage = {}\n      if (result.message && result.error) {\n        extendedMessage.message = `${result.error}: ${result.message}`\n      }\n      throw _.extend(new Error(), result, extendedMessage)\n    }\n\n    return result\n  }\n\n  async _sendTusRequest (streamsMap, opts, onProgress) {\n    const streamLabels = Object.keys(streamsMap)\n\n    // TODO less cb nesting\n    return new Promise((resolve, reject) => {\n      let uploadsDone = 0\n      let totalBytes = 0\n      let lastEmittedProgress = 0\n      const uploadProgresses = {}\n      onProgress = onProgress || (() => {})\n      for (const label of streamLabels) {\n        const file = streamsMap[label]\n        fs.stat(file.path, (err, { size }) => {\n          if (err) return reject(err)\n\n          const uploadSize = size\n          totalBytes += uploadSize\n          uploadProgresses[label] = 0\n          const onTusProgress = (bytesUploaded) => {\n            uploadProgresses[label] = bytesUploaded\n            // get all uploaded bytes for all files\n            const uploadedBytes = streamLabels.reduce((label1, label2) => {\n              return uploadProgresses[label1] + uploadProgresses[label2]\n            })\n            // don't send redundant progress\n            if (lastEmittedProgress < uploadedBytes) {\n              lastEmittedProgress = uploadedBytes\n              onProgress({ uploadProgress: { uploadedBytes, totalBytes } })\n            }\n          }\n\n          const filename = file.path ? path.basename(file.path) : label\n          const tusUpload = new tus.Upload(file, {\n            endpoint: opts.assembly.tus_url,\n            resume  : true,\n            metadata: {\n              assembly_url: opts.assembly.assembly_ssl_url,\n              fieldname   : label,\n              filename,\n            },\n            uploadSize,\n            onError   : reject,\n            onProgress: onTusProgress,\n            onSuccess () {\n              uploadsDone++\n              if (uploadsDone === streamLabels.length) {\n                resolve()\n              }\n            },\n          })\n\n          tusUpload.start()\n        })\n      }\n    })\n  }\n}\n\nmodule.exports = TransloaditClient\n"]}